server {
    listen 443 ssl default_server;
    server_name $DEFAULT_HOSTNAME;
    ssl_certificate /etc/letsencrypt/live/$DEFAULT_HOSTNAME/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DEFAULT_HOSTNAME/privkey.pem;
    server_tokens off;
    http2 on;
    root /usr/share/nginx/html;

    # Allow only the HTTP methods we require.
    if ($request_method !~ ^(GET|HEAD)$) {
        return 405;
    }

    # Never reference this host in HTTP Referer headers.
    add_header Referrer-Policy "no-referrer" always;

    # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # https://owasp.org/www-community/attacks/Clickjacking
    add_header Content-Security-Policy "frame-ancestors 'none'" always;
    add_header X-Frame-Options DENY always;
}

server {
    listen 443 ssl;
    server_name www.$SERVICE_HOSTNAME;
    ssl_certificate /etc/letsencrypt/live/www.$SERVICE_HOSTNAME/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.$SERVICE_HOSTNAME/privkey.pem;
    server_tokens off;
    http2 on;
    root /usr/share/nginx/html;

    # Allow only the HTTP methods we require.
    if ($request_method !~ ^(GET|HEAD)$) {
        return 405;
    }

    # Never reference this host in HTTP Referer headers.
    add_header Referrer-Policy "no-referrer" always;

    # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # https://owasp.org/www-community/attacks/Clickjacking
    add_header Content-Security-Policy "frame-ancestors 'none'" always;
    add_header X-Frame-Options DENY always;

    # Redirect everything to the site without the "www." prefix.
    location / {
        return 301 https://$SERVICE_HOSTNAME$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name $SERVICE_HOSTNAME;
    ssl_certificate /etc/letsencrypt/live/$SERVICE_HOSTNAME/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$SERVICE_HOSTNAME/privkey.pem;
    server_tokens off;
    http2 on;
    root /usr/share/nginx/html;

    # Allow only the HTTP methods we require.
    if ($request_method !~ ^(GET|HEAD|POST)$) {
        return 405;
    }

    # Never reference this host in HTTP Referer headers.
    add_header Referrer-Policy "no-referrer" always;

    # https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # https://owasp.org/www-community/attacks/Clickjacking
    add_header Content-Security-Policy "frame-ancestors 'none'" always;
    add_header X-Frame-Options DENY always;

    # $WG_ARTICLE_PATH is the short URL prefix of the MediaWiki site.
    location = /$WG_ARTICLE_PATH {
        return 301 https://$host$request_uri/;
    }
    location /$WG_ARTICLE_PATH/ {
        try_files $uri $uri/ /$WG_SCRIPT_PATH/index.php;
    }

    # WG_SCRIPT_PATH is the URL base path of the MediaWiki site.
    location = /$WG_SCRIPT_PATH {
        return 301 https://$host$request_uri/;
    }
    location /$WG_SCRIPT_PATH/ {
        auth_basic "Authorization required";
        auth_basic_user_file /etc/nginx/mediawiki.htpasswd;

        location ~ \.php$ {
            fastcgi_split_path_info ^/$WG_SCRIPT_PATH(/.+\.php)(/?.*)$;
            fastcgi_pass mediawiki-fpm:9000;
            fastcgi_index index.php;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME /var/www/html/$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;

            fastcgi_hide_header X-Powered-By;
            fastcgi_hide_header X-Frame-Options;
        }
    }
}
